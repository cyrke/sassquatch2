/*doc
---
title: Menu
name: menu
category: UI Components
---
Context menu style dropdoowns. Actions are delivered in-document
next to the menu toggle as a non-js fallback. When a client is
javascript-enabled, the menu is hidden and posisitioned absolute.

Toggling of menu visibility is handled with javascript (supporting js
for documentation TK).

__NOTE:__ This visual example currently shows the non-js fallback only.
Use as a guide for markup.

```html_example
<div class="menu">
	<a class="menu-toggle" href="#">(icon)</a>

	<ul class="menu-actions">
		<li class="menu-actions-item">
			<a href="#">Select All</a>
		</li>
		<li class="menu-actions-item">
			<a href="#">Select None</a>
		</li>
	</ul>
</div>
```
*/

// Parent
.menu {
	position: relative;
}

// Unorderd list sibling of menu-toggle
.menu-actions {
	@extend %list--reset;

	.hasJS & {
		border: 1px solid $C_border;
		border-radius: $defaultRadius;
		background-color: $C_white;
		display: none;
		position: absolute;
		top: 0;
		right: $space-2;
	}
}

// List item
.menu-actions-item {
	display: inline;

	.hasJS & {
		@extend %listBorders;
		padding-top: 0;
	}
}

// Action
.menu-actions-item a {
	@extend %buttonPersonality;
	display: inline-block;
	padding-right: $space;

	.hasJS & {
		display: block;
		padding: $space $space/2;
		color: $C_textSecondary !important;
		&:hover,
		&:active {
			background-color: $C_overlayPressed;
		}
	}

	// js fallback only
	body:not(.hasJS) & {
		@extend %buttonBase;
		@extend %button--primary;
		@extend %button--small;
	}
}


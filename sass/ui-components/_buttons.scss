// TODO: this needs a lot of mixin and selector cleanup
// 1) avoid outputting selectors from mixins
// 2) create some clarity around modifiers
// 3) clean up selectors generated in button color mixin (and see #1)
// 4) ???
// 5) PROFIT


/*doc
---
title: Buttons
name: buttons
category: UI Components
---

#### Example

```html_example
<a class="button" href="#">Button</a>
<a class="button button--primary" href="#">Primary Button</a>
<a class="button button--borderless" href="#">Borderless Button</a>
<br />
<a class="button button--primary button--contrast" href="#">Contrast Button</a>
<a class="button button--small" href="#">Small Button</a>
<a class="button button--bordered button--fullWidth" href="#">Full width button</a>
```

#### Button variants
A class of `.button` is __required__ for buttons. The following
classes are optional variants:

Class                   | Description
----------------------- | ----------------------------------------
`.button--primary`      | rounded button with dark background; for primary actions
`.button--contrast`     | bold, dark text; use on dark backgrounds or photos (ie. top nav bar)
`.button--bordered`     | rounded bordered button
`.button--small`        | decreases size of button
*/

$btn-color-map: (
	default: transparent,
	primary: $C_link,
	contrast: $C_textPrimaryInverted
) !default;

%buttonBase {
	@include box-sizing(border-box);
	@include transition(background .15s);
	background: transparent;
	border: $border-standard;
	border-radius: 50px;
	cursor: pointer;
	display: inline-block;
	font-size: $font-size;
	font-weight: $W_bold;
	margin: 0;
	padding: $space-half $space;
	text-align: center;
	&:focus {
		outline: 0;
	}
}

%button,
.button {
	@extend %buttonBase;
	color: map-get($btn-color-map, "primary");
	&:hover,
	&:active,
	&:focus {
		background: transparentize(map-get($btn-color-map, "primary"), .8);
		border-color: transparent;
	}

}

%button--primary,
.button--primary {
	@extend %button--borderless;
	background: map-get($btn-color-map, "primary");
	color: $C_textPrimaryInverted;

	&:hover,
	&:active,
	&:focus {
		background: call(nth($btn-hover, 1), map-get($btn-color-map, "primary"), nth($btn-hover, 2));
	}

	&.button--contrast { // TODO (mikep): look into ways to do this without chaining classes
		background: map-get($btn-color-map, "contrast");
		color: $C_textPrimary;
		&:hover,
		&:active,
		&:focus {
			background: transparentize(map-get($btn-color-map, "contrast"), .1);
		}
	}

}

%button--contrast,
.button--contrast {
	background: $C_textTertiary;
	border: $btn-border map-get($btn-color-map, "contrast");
	color: map-get($btn-color-map, "contrast");

	&:hover,
	&:active,
	&:focus {
		background: $C_textSecondary;
		border: $btn-border map-get($btn-color-map, "contrast");
	}
}

//
// Button border modifiers
//
%button--bordered {
	border: $btn-border;
	color: map-get($btn-color-map, "primary");
	font-weight: $W_normal;
	&:hover,
	&:active,
	&:focus {
		background: transparentize(map-get($btn-color-map, "primary"), .8);
	}
}

%button--borderless,
.button--borderless {
	border: none;

	&:hover,
	&:active,
	&:focus {
		border: none;
	}

}

//
// Button size modifiers
//
%button--small,
.button--small {
	font-size: $font-size-small;
	padding: $space-quarter $space-half;
}

%button--fullWidth,
.button--fullWidth {
	display: block;
	width: 100%;
}

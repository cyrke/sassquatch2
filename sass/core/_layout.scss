/*doc
---
title: Layout
name: layout
category: Core
---
TK
TODO: link to separate layout visual example page
*/


// TODO: half space children container


/*doc
---
title: Stripe
name: stripe
parent: layout
---
A `.stipe` class should be applied to `<section>` elements
to visually divide the page with stripes of color.

To align content within a stripe, use `.bounds`.

```html_example
<section class="stripe">
	<div class="bounds">
		<p>... default stripe ...</p>
	</div>
</section>

<section class="stripe--inverted inverted">
	<div class="bounds">
		<p>... inverted stripe, using `inverted` class to set text colors  ...</p>
	</div>
</section>

<section class="stripe--collection">
	<div class="bounds">
		<p>... collection variant of stripe, used to contain collections of cards </p>
	</div>
</section>
```

#### Stripe variants
A class of `.stripe` is required; the following classes are
optional variants:

Class                | Description
-------------------- | ------------------------------------------------------------
`.stripe--inverted`  |  applies the standard `$C_contentBGInverted` background color
`.stripe--collection`|  applies a light gray background; for use with card collections
`.stripe--hero`      |  for hero header stripes
`.stripe--photoHero` |  for hero header stripes; adds text protection
*/
%stripe,
.stripe {
	overflow: hidden;
	border-top: 1px solid $C_border;
	background-color: #fff;
	margin-bottom: 0;
}

.stripe--collection {
	@extend %stripe;
	background-color: $C_collectionBGLight;
}

.stripe--inverted {
	@extend %stripe;
	background-color: $C_contentBGInverted;
}

%_heroStripe {
	@extend %stripe;
	background-color: $C_accent;
	background-size: cover;
	background-position: center 20%;
	background-repeat: no-repeat;
	border-top: none;
	overflow: hidden;
	position: relative;

}
.stripe--hero {
	@extend %_heroStripe;
}
.stripe--photoHero {
	@extend %_heroStripe;
	@include textProtectionScrim();
}


// TODO: find out what's up with the bottom spacing within a stripe

/*doc
---
title: Bounds
name: bounds
parent: layout
---
Used as a non-visual content container that manages content measure,
 Similar to [sassquatch 1 `docBounds`](http://meetup.github.io/sassquatch/doc_desktop/layout.html#docstar).

Centers children with auto margin, clears floats, applies
padding, and sets a max-width.

```html_example
<section class="stripe">
	<p>This is just a paragraph inside a stripe. There's no bounds element to center and set the measure of this text.</p>
</section>

<section class="stripe">
	<div class="bounds">
		<p>This paragraph is inside a bounds. It enjoyes auto-margin and a max-width to ensure the type measure remains readable at all viewport sizes.</p>
	</div>
</section>

<section class="stripe">
	<div class="bounds _DOC-SHADE">
		<p><strong>Previous example, shaded to show detail</strong></p>
		<p>This paragraph is inside a bounds. It enjoyes auto-margin and a max-width to ensure the type measure remains readable.</p>
	</div>
</section>
```

#### Bounds variants

Class             | Description
----------------- | -------------------------------------
`.bounds`         | standard bounds for any type of content
`.bounds--form`   | bounds for wrapping forms; applies narrower measure
*/
.bounds {
	@extend %clearfix;
	box-sizing: border-box;
	margin-left: auto;
	margin-right: auto;
	max-width: $bounds;
	padding: $space;
	width: 100%;
}

/*
// should get handled by side titles now
.bounds--form {
	max-width: $form-max-width;
}
*/

/*doc
---
title: Chunk
name: chunk
parent: layout
---
Adds bottom space to an element
or a group of elements.

```html_example
<div class="_DOC-SHADE chunk">
	<h2>Some heading</h2>
	<p>Some text</p>
	<p class="text--caption">Some kind of caption</p>
</div>

<p class="text--caption chunk">Chunky caption</p>

<div class="_DOC-SHADE chunk">
	<h2>Some heading</h2>
	<p>Some text</p>
	<p class="text--caption">Some kind of caption</p>
</div>
```
*/
.chunk {
	@extend %clearfix;
	margin-bottom: $space;
}


/*doc
---
title: Flex Row
name: flexRow
parent: layout
---
Arranges content in rows using `display: flex`.

The `.row` class is applied to a wrapping element.

Direct children of `.row` are flex children, and require
a class of `.row-item` with an optional `.row-item--shirnk`
for a flex-shrink item.

The flex children in flex row do not have a `flex-basis` set; a
basis is not required for most common layout tasks.

_Includes `table-cell` fallback for IE8._

#### Examples:

```html_example
<div class="row">
	<div class="_DOC-SHADE row-item">Item 1</div>
	<div class="_DOC-SHADE row-item row-item--shrink">Item 2</div>
	<div class="_DOC-SHADE row-item row-item--shrink">Item 3</div>
	<div class="_DOC-SHADE row-item">Item 4</div>
</div>
```

```html_example
<div class="row">
	<div class="_DOC-SHADE row-item row-item--shrink">Item 1</div>
	<div class="_DOC-SHADE row-item">Item 2</div>
	<div class="_DOC-SHADE row-item row-item--shrink">Item 3</div>
</div>
```

```html_example
<div class="row row--flexEnd">
	<div class="_DOC-SHADE row-item row-item--shrink">Item 1</div>
	<div class="_DOC-SHADE row-item row-item--shrink">Item 2</div>
	<div class="_DOC-SHADE row-item row-item--shrink">Item 3</div>
</div>
```

```html_example
<div class="row row--spaceBetween row--reverse">
	<div class="_DOC-SHADE row-item row-item--shrink">Item 1</div>
	<div class="_DOC-SHADE row-item row-item--shrink">Item 2</div>
	<div class="_DOC-SHADE row-item row-item--shrink">Item 3</div>
	<div class="_DOC-SHADE row-item row-item--shrink">Item 4</div>
</div>
```
*/
.row {
	@include display(flex);
	@include flex-wrap(nowrap);
	@include flex-direction(row);
	@include justify-content(flex-start);
	@include align-items(flex);
}
.row-item {
	padding-left: $space;
	@include flex-grow(1);
	width: 0;
	&:first-child {
		padding-left: 0;
	}
}


/*doc
---
title: Row variants
name: flexrowParent
parent: flexRow
---

A class of `.row` is __required__ on the flex row parent. The
following classes are optional variants:

Class                   | Description
----------------------- | -------------------------------
`.row--noGutters`       | removes padding from all `.row-item` children
`.row--reverse`         | reverses row order
`.row--flexEnd`         | justifies content to `flex-end`
`.row--center`          | justifies content to `center`
`.row--spaceBetween`    | justifies content to `spaceBetween`
`.row--spaceAround`     | justifies content to `spaceAround`
*/
.row--noGutters .row-item {
	padding: 0;
}
.row--reverse {
	@include flex-direction(row-reverse);
}
@each $jName, $jprop in $flexJustifyMap {
	.row--#{$jName} {
		@include justify-content($jprop);
	}
}

/*doc
---
title: Row Item variants
name: flexrowItemVars
parent: flexRow
---

A class of `.row-item` is __required__ on row items.
The following classes are optional variants:

Class                   | Description
----------------------- | -------------------------------
`.row-item--shrink`     | Item shrinks to fit content
`.row-item--alignMiddle`| Vertically aligns content to middle
*/
.row-item--shrink {
	@include flex-grow(0);
	@include flex-shrink(1);
	width: initial;
}
.row-item--alignMiddle {
	@include align-self(center);
}

// LT IE9 fallback
.lt--IE9 .row {
	@include box-sizing(border-box);
	display: table;
	table-layout: auto;
	width: 100%;
}
.lt--IE9 .row-item {
	display: table-cell;
	width: 100%;
}
.lt--IE9 .row-item--shrink {
	width: auto;
}
.lt--IE9 .row-item--alignMiddle {
	vertical-align: middle;
}


/*doc
---
title: Grid List
name: gridList
parent: layout
---
A grid layout with breakpoint specific numbers of items in each row.

better docs TK

```html_example
<ul class="gridList gridList--has1 atMedium_gridList--has3 atLarge_gridList--has4">
	<li class="_DOC-SHADE">grid cell</li>
	<li class="_DOC-SHADE">grid cell</li>
	<li class="_DOC-SHADE">grid cell</li>
	<li class="_DOC-SHADE">grid cell</li>
	<li class="_DOC-SHADE">grid cell</li>
	<li class="_DOC-SHADE">grid cell</li>
	<li class="_DOC-SHADE">grid cell</li>
	<li class="_DOC-SHADE">grid cell</li>
</ul>
```
*/
$glColumns: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10;

.gridList {
	margin: 0 #{-$space} 0 0;
	padding: 0;
	list-style: none;
	font-size: 0;
	> li {
		font-size: 1rem;
		display: inline-block;
		margin: 0;
		padding: 0 $space $space 0;
		vertical-align: top;
		width: 50%;
		@include box-sizing(border-box);
	}
}

/*doc
---
title: Grid List variants
name: gridListVariants
parent: gridList
---

A class of `gridList` is __required__ on the gridList
parent element. By default, gridList creates a 2 column
grid.

The following classes are optional variants:

Class                         | Description
----------------------------- | ------------------------------
`.gridList--photoGrid`        | Optimizes list item spacing for a grid of photos
`.gridList--has[n]`           | Adjusts number of columns (ie. `.gridList--has4` creates a 4 column grid for all screen sizes)
`.atMedium_gridList--has[n]`  | Sets number of columns for medium breakpoint and up (ie. `.atMedium_gridList--has[6]`)
`.atLarge_gridList--has[n]`   | Sets number of columns for large breakpoint and up (ie. `.atLarge_gridList--has[10]`)

*/
.gridList--photoGrid > li {
	padding: 0 $space-quarter $space-quarter 0;
}
@include atMediaDown(medium) {
	.gridList--photoGrid {
		margin: 0 #{-($space + $space-half)} 0 #{-$space};
		padding: 0;
	}
}

// small/default
@each $col in $glColumns {
	.gridList--has#{$col} > li {
		width: percentage(1 / $col);
	}
}

// larger breakpoints
@each $bname, $bp in (medium: $breakpoint-m, large: $breakpoint-l) {
	@include atMediaUp($bname) {
		@each $col in $glColumns {
			.at#{str-firstCharToUpper($bname)}_gridList--has#{$col} > li {
				width: percentage(1 / $col);
			}
		}
	}
}

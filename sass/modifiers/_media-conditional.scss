/*doc
---
title: Media-conditional modifiers
name: mediaMod
category: Modifier Classes
---

Media-conditional modifiers allow us to apply
a modification at a specific breakpoint.

_Uses atMediaUp_

### Example

```html_example
	<p class="atLarge_align--center">
		This text inherits the default left alignment by default, but at `large` viewports and up, the text should center
	</p>
```

### Supported modifications
Using this signature: `.at[Breakpoint]_[property]--[variant]`

Breakpoints        | Property       | Variants
------------------ | -------------- | ---------------------------
`medium`, `large`  | `align`        | `center`, `right`, `left`
`medium`, `large`  | `display`      | `none`, `block`, `flex`, `inline`, `inlineBlock`, `inlineFlex`
`medium`, `large`  | `padding`      | `top`, `right`, `bottom`, `left`, `none`
`medium`, `large`  | `margin`       | `center`
`medium`, `large`  | `border`       | `top`, `none`
`medium`, `large`  | `visibility`   | `a11yHide`, `a11yShow`
`medium`, `large`  | `width`        | `auto`, `full`
*/

// text align
@each $alignment in (center, right, left) {
	@include _bpModifier('align', $alignment) {
		text-align: $alignment !important;
	}
}

// display
@each $display in $display-values {

	// convert hyphenated display values to camelCase
	$_camelValue: str-replace(str-replace($display, '-block', 'Block'), '-flex', 'Flex');

	@include _bpModifier('display', $_camelValue) {
		display: $display !important;
	}
}

// a11y display hide and show
@include _bpModifier( 'visibility', 'a11yHide' ) {
	@include a11yVisibility('hidden');
}
@include _bpModifier( 'visibility', 'a11yShow') {
	@include a11yVisibility('visible');
}

// width
@include _bpModifier('width', 'auto') {
	width: auto !important;
}
@include _bpModifier('width', 'full') {
	width: 100% !important;
}

// padding
@each $alignment in (top, right, bottom, left, none) {
	@include _bpModifier('padding', $alignment) {
		@if "#{$alignment}" == "none" {
			padding: 0 !important;
		} @else {
			padding-#{$alignment}: $space;
		}
	};
}

// margin
@include _bpModifier('margin', 'center') {
	margin-left: auto;
	margin-right: auto;
}

// border
@include _bpModifier('border', 'top') {
	@include standardBorder();
}
@include _bpModifier('border', 'none') {
	border-width: 0 !important;
}
